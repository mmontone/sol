<?xml version="1.0"?><st-source><!-- Name: Sol-GenerationToolDbIdentifier: sol-remoteDbTrace: 42PackageName: Sol-GenerationToolParcel: #('Sol-GenerationTool')PrintStringCache: (1.0,mariano_montone)Date: 8:45:04 pm August 20, 2006 --><time-stamp>From VisualWorksÂ® NonCommercial, 7.3.1 of April 20, 2005 on August 20, 2006 at 8:45:04 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Items</name><environment>Sol</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>Sol-GenerationTool</category><attributes><package>Sol-GenerationTool</package></attributes></name-space><class><name>Item</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>solitaireSpec solitaireName modified solitaireClass generated bufferedSpec generator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Sol-GenerationTool</category><attributes><package>Sol-GenerationTool</package></attributes></class><class><name>GenerationTool</name><environment>Sol</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>solitaireSpec output selectedItem itemsListHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Sol-GenerationTool</category><attributes><package>Sol-GenerationTool</package></attributes></class><shared-variable><name>Items</name><environment>Sol.GenerationTool</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>OrderedCollection new</initializer><attributes><package>Sol-GenerationTool</package></attributes></shared-variable><methods><class-id>Item</class-id> <category>accessing</category><body package="Sol-GenerationTool" selector="isGenerated">isGenerated	^generated</body><body package="Sol-GenerationTool" selector="isGenerated:">isGenerated: bool	generated := bool</body><body package="Sol-GenerationTool" selector="isModified">isModified	^modified</body><body package="Sol-GenerationTool" selector="isModified:">isModified: anObject	modified := anObject</body><body package="Sol-GenerationTool" selector="solitaireClass">solitaireClass	^solitaireClass</body><body package="Sol-GenerationTool" selector="solitaireClass:">solitaireClass: aClass	solitaireClass := aClass</body><body package="Sol-GenerationTool" selector="solitaireName">solitaireName	^solitaireName</body><body package="Sol-GenerationTool" selector="solitaireName:">solitaireName: aString	solitaireName := aString</body><body package="Sol-GenerationTool" selector="solitaireSpec">solitaireSpec	^bufferedSpec</body><body package="Sol-GenerationTool" selector="solitaireSpec:">solitaireSpec: anObject	bufferedSpec := anObject.	self isModified: true</body></methods><methods><class-id>Item</class-id> <category>initialize-release</category><body package="Sol-GenerationTool" selector="initialize">initialize	modified := false.	generated := false.	solitaireName := ''.	solitaireSpec := ''.	bufferedSpec := ''</body></methods><methods><class-id>Item</class-id> <category>printing</category><body package="Sol-GenerationTool" selector="printString">printString	^self solitaireName</body></methods><methods><class-id>Item</class-id> <category>actions</category><body package="Sol-GenerationTool" selector="cancel">cancel	bufferedSpec := solitaireSpec.	self isModified: false</body><body package="Sol-GenerationTool" selector="delete">delete	self isGenerated ifTrue:[		generator removeSolitaire]</body><body package="Sol-GenerationTool" selector="generate">generate	| ast |	ast := (SolParserDecorator on: (ReadStream on:self solitaireSpec) with: Sol.ASTGrammarBuilder new) parse.	generator := Sol.CodeGeneration.SolitaireGenerator on: ast solitaireName: self solitaireName spec: self solitaireSpec.	generator run.	self isGenerated: true</body><body package="Sol-GenerationTool" selector="play">play	generator playSolitaire</body><body package="Sol-GenerationTool" selector="save">save	solitaireSpec := bufferedSpec.	self isModified: false</body></methods><methods><class-id>Item class</class-id> <category>initialize-release</category><body package="Sol-GenerationTool" selector="new">new	^super new initialize</body></methods><methods><class-id>Sol.GenerationTool</class-id> <category>aspects</category><body package="Sol-GenerationTool" selector="gamesListHolder">gamesListHolder	^itemsListHolder</body><body package="Sol-GenerationTool" selector="output">output	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^output isNil		ifTrue:			[output := String new asValue]		ifFalse:			[output]</body><body package="Sol-GenerationTool" selector="solitaireSpec">solitaireSpec	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^solitaireSpec isNil		ifTrue:			[solitaireSpec := String new asValue]		ifFalse:			[solitaireSpec]</body></methods><methods><class-id>Sol.GenerationTool</class-id> <category>initialize-release</category><body package="Sol-GenerationTool" selector="initialize">initialize	super initialize.	selectedItem := nil.	"itemsList := (Sol.Application localBindings collect:[:binding |		binding value at: binding key]) asOrderedCollection."	"Transcript show: gamesList printString."	itemsListHolder := SelectionInList with: self items.	itemsListHolder selectionIndexHolder onChangeSend: #gameChanged		to: self.	"solitaireSpec := String new asValue.	solitaireSpec onChangeSend:#specChanged to: self.	output := String new asValue"</body></methods><methods><class-id>Sol.GenerationTool</class-id> <category>actions</category><body package="Sol-GenerationTool" selector="addItem:">addItem: anItem	anItem solitaireName = '' ifTrue:[ self error:'The solitaire name can not be empty'].	self items do: [:item | 		item solitaireName = anItem solitaireName ifTrue:[			self error:'A solitaire with name ' , anItem solitaireName, ' already exists']].	self items add: selectedItem</body><body package="Sol-GenerationTool" selector="deleteGame">deleteGame	| delete |	delete := Dialog confirm: 'Are you sure you want to delete the solitaire?'.	delete ifTrue:[		self items remove: selectedItem.		self items changed.		itemsListHolder selectionIndex:0.		self gameChanged]</body><body package="Sol-GenerationTool" selector="displayHelp">displayHelp	Dialog warn:'Coming soon'</body><body package="Sol-GenerationTool" selector="exit">exit	self closeAndUnschedule</body><body package="Sol-GenerationTool" selector="gameChanged">gameChanged	|menu|	menu := self builder menuAt: #gamesListMenu.	selectedItem := itemsListHolder selection.		selectedItem isNil ifTrue:[		(self widgetAt:#PlayButton) isEnabled: false.		(self widgetAt:#SaveButton) isEnabled: false.		(self widgetAt:#GenerateButton) isEnabled: false.		(menu atNameKey: #DeleteGame) disable.		solitaireSpec value:''.]	ifFalse:[ 		(self widgetAt:#PlayButton) isEnabled: selectedItem isGenerated. 		(self widgetAt:#SaveButton) isEnabled: selectedItem isModified.		(self widgetAt:#GenerateButton) isEnabled: selectedItem isModified not.		(menu atNameKey: #DeleteGame) enable.		solitaireSpec value: selectedItem solitaireSpec]</body><body package="Sol-GenerationTool" selector="generateGame">generateGame	[selectedItem generate] on: Core.Error do:[:e | ^self sendToOutput: e errorString].	"Dialog warn:'The solitaire game has been successfully generated'"	self gameChanged.	self sendToOutput: 'The solitaire game has been successfully generated'</body><body package="Sol-GenerationTool" selector="newGame">newGame	| solName |	solName := Dialog request: 'Solitaire name' initialAnswer: 'MySolitaire' onCancel: [^nil].	selectedItem := Item new solitaireName: solName; solitaireSpec:''; save.	[self addItem: selectedItem] on: Exception do:[:e| Dialog warn: e errorString]</body><body package="Sol-GenerationTool" selector="playGame">playGame	selectedItem play</body><body package="Sol-GenerationTool" selector="saveGame">saveGame	selectedItem := selectedItem save.	self gameChanged.</body><body package="Sol-GenerationTool" selector="specChanged">specChanged	selectedItem isNil ifFalse:[selectedItem solitaireSpec: solitaireSpec value].	self gameChanged	"| save |	specChanged := true.	save := Dialog confirm:'Save the changes?'.	save ifTrue:[		selectedItem ifNil:[			self newGame]		ifNotNil:[			self saveGame]]"	"(self widgetAt:#SaveButton) isEnabled: true."</body></methods><methods><class-id>Sol.GenerationTool</class-id> <category>accessing</category><body package="Sol-GenerationTool" selector="items">items	^ GenerationTool items</body><body package="Sol-GenerationTool" selector="items:">items: items	GenerationTool items: items</body><body package="Sol-GenerationTool" selector="sendToOutput:">sendToOutput: aString	| out |	out := ReadWriteStream on: String new.	out nextPutAll: output value.		out nextPutAll: aString.	out cr.	output value: out contents</body></methods><methods><class-id>Sol.GenerationTool class</class-id> <category>items</category><body package="Sol-GenerationTool" selector="items">items	^Items</body><body package="Sol-GenerationTool" selector="items:">items: aCollection	Items := aCollection </body></methods><methods><class-id>Sol.GenerationTool class</class-id> <category>interface specs</category><body package="Sol-GenerationTool" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Solitaire Game Generator' 			#bounds: #(#{Graphics.Rectangle} 351 213 909 692 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.267025 5 0.728601 0 0.989247 0 0.989562 ) 					#name: #Output 					#model: #output 					#tabRequiresControl: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 7 0 0 0.265233 0 0.505219 ) 					#name: #GamesList 					#model: #gamesListHolder 					#menu: #gamesListMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.267025 7 0 0 0.989247 0 0.728601 ) 					#name: #Editor 					#model: #solitaireSpec 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #specChanged ) 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.267025 0 0.728601 0 0.989247 5 0.728601 ) 					#name: #HorizontalResizingSplitter 					#flags: 8 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'Editor' 					#belowWidgets: 'Output' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.267025 7 0 5 0.267025 0 0.989562 ) 					#name: #VerticalResizingSplitter 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'GamesList' 					#belowWidgets: 'Editor HorizontalResizingSplitter Output' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.Rectangle} 0 0 81 24 ) 							#name: #PlayButton 							#flags: 40 							#model: #playGame 							#label: 'Play' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.Rectangle} 0 31 81 55 ) 							#name: #SaveButton 							#flags: 40 							#model: #saveGame 							#label: 'Save' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.Rectangle} 0 123 81 147 ) 							#name: #HelpButton 							#model: #displayHelp 							#label: 'Help' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.Rectangle} 0 155 81 179 ) 							#name: #ExitButton 							#model: #exit 							#label: 'Exit' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.Rectangle} 0 62 81 85 ) 							#name: #GenerateButton 							#flags: 40 							#model: #generateGame 							#label: 'Generate' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 12 0 0 0.565762 93 0 439 0.55 ) 						#name: #Buttons ) ) ) ) )</body></methods><methods><class-id>Sol.GenerationTool class</class-id> <category>resources</category><body package="Sol-GenerationTool" selector="gamesListMenu">gamesListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #gamesListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'New game' 				#nameKey: #NewGame 				#value: #newGame ) 			#(#{UI.MenuItem} 				#rawLabel: 'Delete' 				#nameKey: #DeleteGame 				#value: #deleteGame ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>